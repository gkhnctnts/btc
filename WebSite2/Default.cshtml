@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "KOİNİM";
}

@section Scripts {

}

@{
    Layout ="~/_SiteLayout.cshtml" ;
    Page.Title = "Anasayfa";

    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        returnUrl = Href("~/");
    }

    // Setup 
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "You must specify a password.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    if (IsPost)
    {
        AntiForgery.Validate();
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty())
        {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        }
        else if (Validation.IsValid())
        {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow)
            {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            if (WebSecurity.Login(email, password, rememberMe))
            {
                Context.RedirectLocal(returnUrl);
                return;
            }
            else
            {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}

<section id="loginForm">

    <form method="post">
        @AntiForgery.GetHtml()
        @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

        <fieldset>
            <legend>Giriş yapınız</legend>
            <ol>
                <li class="email">
                    <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }>Eposta Adresi</label>
                    <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                    @Html.ValidationMessage("email")
                </li>
                <li class="password">
                    <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Şifre</label>
                    <input type="password" id="password" name="password" @Validation.For("password") />
                    @Html.ValidationMessage("password")
                </li>
                <li class="remember-me">
                    <input type="checkbox" id="rememberMe" name="rememberMe" value="true" checked="@rememberMe" />
                    <label class="checkbox" for="rememberMe">Beni hatırla</label>
                </li>
            </ol>
        </fieldset>
    </form>
    <p>

        <a href="~/Account/Logout.cshtml"> Hesabınız yok mu?</a>
        <a href="~/Account/ForgotPassword">Şifrenizi mi unuttunuz?</a>
    </p>
</section>

}